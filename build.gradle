plugins {
  id "java"
  id "distribution"
  id 'com.github.spotbugs' version '5.1.3'
  // https://github.com/nemerosa/versioning
  id 'net.nemerosa.versioning' version '3.1.0'
}

ext {
//  interlokParentGradle = "https://raw.githubusercontent.com/adaptris/interlok-build-parent/main/v5/build.gradle"
  interlokVersion = '5.0-SNAPSHOT'
  // Include the WAR file since by default it is excluded.
  includeWar='true'
  testingCommonGradle = "https://raw.githubusercontent.com/interlok-testing/testing_common/refs/heads/master/common.gradle?timestamp=${new Date().getTime()}"
  //testingCommonGradle = "../interlok-testing-common/common.gradle"
  interlokTestingVersion = "0.1"
  nexusBaseUrl  = 'https://nexus.adaptris.net'
  javadocsBaseUrl = "${nexusBaseUrl}/nexus/content/sites/javadocs/com/adaptris"
  interlokJavadocs= project.findProperty('interlokJavadocs') ?: javadocsBaseUrl + "/interlok-core/" + interlokVersion
  interlokCommonJavadocs= project.findProperty('interlokCommonJavadocs') ?: javadocsBaseUrl + "/interlok-common/" + interlokVersion
  componentName='Interlok Application/KIE Models'
  componentDesc="KIE rules' models"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '2.0.9'
}

allprojects {
  apply from: "${testingCommonGradle}"
  // specify the version of the configuration.
  version=versioning.info.full
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
group   = 'com.adaptris'
version = interlokVersion
def versionDir = "$buildDir/version"

configurations {
  javadoc {}
  // patch interlokRuntime to extend implementation, so we only declare our dependencies once.
  interlokRuntime.extendsFrom implementation
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  implementation ("com.adaptris:interlok-core:$interlokVersion") { changing= true}
  implementation ("com.adaptris:interlok-common:$interlokVersion") { changing= true}
  implementation ("com.adaptris:interlok-scripting:$interlokVersion") { changing= true}
  implementation ("com.adaptris:interlok-kie:$interlokVersion") { changing= true}
  implementation ("org.slf4j:slf4j-api:$slf4jVersion")
  implementation ("org.drools:drools-mvel:7.73.0.Final")
  
  // This is to make sure that the annotation processors are enabled during the
  // compile phase.
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  // To handle the custom javadoc taglets.
  javadoc("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  
  interlokJavadocs group: "com.adaptris", name: "interlok-kie", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false
  
  implementation ("com.adaptris:interlok-service-tester:$interlokVersion") { changing=true }

  testImplementation group: "com.adaptris", name: "interlok-testing-common", version: "$interlokTestingVersion"
  
  // Patch interlokRuntime to include the custom jar.
  interlokRuntime files(jar.archiveFile){
    builtBy 'jar'
  }
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

// Generate the META-INF/adaptris-version file since we want to have it reported in the UI.
sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'component.description', value: componentDesc)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
    }
  }
}

// Since we have custom code in play, we have to "patch" the verifyLauncherJar + serviceTesterLauncher configurations to depend on jar.
verifyLauncherJar.configure {
  dependsOn jar
}

serviceTesterLauncherJar.configure {
  dependsOn jar
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  reports {
    xml {
      required.set(false)
    }
    html {
      required.set(true)
      stylesheet = 'default.xsl'
    }
  }
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  scanConfigurations = [ "api", "compileClasspath", "runtimeClasspath" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
    knownExploitedURL=project.findProperty('dependencyCheckKnownExploitedURL')
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

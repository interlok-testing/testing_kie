plugins {
  id "java"
  id "distribution"
  id 'com.github.spotbugs' version '4.6.2'
  // https://github.com/nemerosa/versioning
  id 'net.nemerosa.versioning' version '2.14.0'
}

ext {
  interlokParentGradle = "https://raw.githubusercontent.com/adaptris-labs/interlok-build-parent/master/build.gradle"
  interlokVersion = '4.0-SNAPSHOT'
  // Include the WAR file since by default it is excluded.
  includeWar='true'
  nexusBaseUrl  = 'https://nexus.adaptris.net'
  javadocsBaseUrl = "${nexusBaseUrl}/nexus/content/sites/javadocs/com/adaptris"
  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokVersion
  componentName='Interlok Application/KIE Models'
  componentDesc="KIE rules' models"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.30'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

allprojects {
  apply from: "${interlokParentGradle}"
  // specify the version of the configuration.
  version=versioning.info.full
}

sourceCompatibility = 11
group   = 'com.adaptris'
version = interlokVersion
def versionDir = "$buildDir/version"

configurations {
  javadoc {}
  // patch interlokRuntime to extend runtime, so we only declare our dependencies once.
  interlokRuntime.extendsFrom runtime
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


dependencies {
  compile ("com.adaptris:interlok-core:$interlokVersion") { changing= true}
  compile ("com.adaptris:interlok-common:$interlokVersion") { changing= true}
  compile ("com.adaptris:interlok-kie:$interlokVersion") { changing= true}
  compile ("org.slf4j:slf4j-api:$slf4jVersion")
  compile ("org.drools:drools-mvel:7.51.0.t20210303")
  
  // This is to make sure that the annotation processors are enabled during the
  // compile phase.
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  // To handle the custom javadoc taglets.
  javadoc("com.adaptris:interlok-core-apt:$interlokVersion") { changing= true}
  
  interlokJavadocs group: "com.adaptris", name: "interlok-kie", version: "$interlokVersion", classifier: "javadoc", changing: true, transitive: false
  
  compile ("com.adaptris:interlok-service-tester:$interlokVersion") { changing=true }
  
  // Patch interlokRuntime to include the custom jar.
  interlokRuntime files(jar.archiveFile){
    builtBy 'jar'
  }
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

// Generate the META-INF/adaptris-version file since we want to have it reported in the UI.
sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'component.description', value: componentDesc)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
    }
  }
}

// Since we have custom code in play, we have to "patch" the verifyLauncherJar + serviceTesterLauncher configurations to depend on jar.
verifyLauncherJar.configure {
  dependsOn jar
}

serviceTesterLauncherJar.configure {
  dependsOn jar
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  // showProgress = "true"
  effort = "max"
  // Ignore failures?
  // ignoreFailures = false
  reports {
    xml {
      enabled = false
    }
    html {
      enabled = true
    }
  }
  // includeFilter = new File("$rootDir/gradle/spotbugs-filter.xml")
  // excludeFilter = new File("$rootDir/gradle/spotbugs-exclude.xml")
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  skipConfigurations = [ "antSql", "spotbugs", "umlDoclet", "offlineJavadocPackages", "javadoc", "jacocoAnt", "jacocoAgent", "spotbugsPlugins", "spotbugsSlf4j" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false
